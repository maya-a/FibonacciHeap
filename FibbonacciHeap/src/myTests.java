import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;

public class myTests {
    public static void main(String[] args) {
        /**
         * test 29
         */
        FibonacciHeap fibonacciHeap = new FibonacciHeap();
        int size = 1024;
        for (int i = size; i >= 0; i--) {
            fibonacciHeap.insert(i);
        }

        fibonacciHeap.deleteMin();

        int [] arr = FibonacciHeap.kMin(fibonacciHeap,100);

        for (int i = 0; i < 100; i++) {
            if(arr[i] != i+1){
                System.out.println("oh no 1 in i="+i);
            }
        }
        for (int i = 0; i < size; i++) {
            if (fibonacciHeap.findMin().getKey() != i + 1) {
                System.out.println("oh no 2 in i="+i);
            }
            fibonacciHeap.deleteMin();
        }
        System.out.println("you're good");

        /**
         * test 20
         */
//        FibonacciHeap fibonacciHeap = new FibonacciHeap();
//        fibonacciHeap.insert(4);
//        FibonacciHeap.HeapNode node5 = fibonacciHeap.insert(5);
//        FibonacciHeap.HeapNode node6 = fibonacciHeap.insert(6);
//        fibonacciHeap.deleteMin();
//
//        fibonacciHeap.insert(1);
//        fibonacciHeap.insert(2);
//        fibonacciHeap.insert(3);
//        fibonacciHeap.deleteMin();
//
//        fibonacciHeap.insert(1);
//        fibonacciHeap.deleteMin();
//
//        int cuts = FibonacciHeap.totalCuts();
//        int links = FibonacciHeap.totalLinks();
//
//        fibonacciHeap.decreaseKey(node6, 2);
//        fibonacciHeap.decreaseKey(node5, 1);
//
//        System.out.println(fibonacciHeap.markedNodes); // = 1
//        System.out.println(fibonacciHeap.trees); // = 2
//        System.out.println(fibonacciHeap.potential()); // = 4
//        System.out.println(FibonacciHeap.totalCuts() - cuts); //= 1
//        System.out.println(FibonacciHeap.totalLinks() - links); //= 0)
         /** test0
         */
//        int size = 1000;
//        int[] numbers = {};
//
//        for (int i = 0; i < size; i++) {
//            FH.insert(numbers[i]);
//        }

//        ArrayList<Integer> numbers = new ArrayList<>();
//
//        for (int i = 0; i < 1000; i++) {
//            numbers.add(i);
//        }
//
//        Collections.shuffle(numbers);
//        System.out.println(Arrays.toString(numbers.toArray()));
//        for (int i = 0; i < size; i++) {
//            FH.insert(numbers.get(i));
//        }
//
//        for (int i = 0; i < size; i++) {
//            if (FH.findMin().getKey() != i) {
//                System.out.println("oh no!");
//                return;
//            }
//            FH.deleteMin();
//            System.out.println("deleted " + i);
//            if (i == 777) {
//                System.out.println("here");
//            }
//        }
//        System.out.println("done!");


    }
}
